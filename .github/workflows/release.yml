name: Release Action

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform:
          - name: linux-x86_64
            runs-on: ubuntu-latest
          - name: linux-arm64
            runs-on: ubuntu-24.04-arm
          - name: macos-arm64
            runs-on: macos-latest
          - name: macos-x86_64
            runs-on: macos-13
          - name: windows-x86_64
            runs-on: windows-latest

    name: Setup on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Linux
        if: matrix.platform.runs-on == 'ubuntu-latest' || matrix.platform.runs-on == 'ubuntu-24.04-arm'
        uses: ./.github/actions/setup-linux
        with:
          runs-on: ${{ matrix.platform.runs-on }}

      - name: Setup macOS
        if: matrix.platform.runs-on == 'macos-latest' || matrix.platform.runs-on == 'macos-13'
        uses: ./.github/actions/setup-macos
        with:
          runs-on: ${{ matrix.platform.runs-on }}

      - name: Setup Windows
        if: matrix.platform.runs-on == 'windows-latest'
        uses: ./.github/actions/setup-windows
        with:
          runs-on: ${{ matrix.platform.runs-on }}

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Set up Pythons
        if: matrix.platform.os != 'windows'
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.9
            3.10
            3.11
            3.12
            3.13

      - name: Setup Python
        if: matrix.platform.os != 'windows'
        id: setup-python
        uses: ./.github/actions/setup-python

      - name: Tests & Building
        uses: ./.github/actions/cargo
        with:
          test: true
          runs-on: ${{ matrix.platform.runs-on }}
          name: ${{ matrix.platform.name }}

      - name: Build wheels
        if: matrix.platform.os != 'windows'
        uses: ./.github/actions/python-build
        with:
          name: ${{ matrix.platform.name }}

  build-windows-python:
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    runs-on: windows-latest
    name: Build Windows Python Wheel with Python ${{ matrix.python-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Windows
        uses: ./.github/actions/setup-windows

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Setup Python
        uses: ./.github/actions/setup-python
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: ./.github/actions/python-build
        with:
          name: windows-x86_64-py${{ matrix.python-version }}

      - name: Install wheel package
        run: pip install wheel

      - name: Write inject_dll.py script
        run: |
          $script = @'
          from wheel.wheelfile import WheelFile
          from pathlib import Path
          import glob
          import sys
          import re

          # === Locate DLL ===
          dll_dir = Path("C:/tools/opencv")
          dll_candidates = list(dll_dir.rglob("opencv_world*.dll"))
          dlls = [dll for dll in dll_candidates if not re.search(r"d\.dll$", dll.name)]

          if not dlls:
              print("❌ No matching OpenCV DLLs found (excluding *d.dll).")
              sys.exit(1)

          dll_path = dlls[0]
          print(f"Found DLL: {dll_path}")

          # === Locate wheel ===
          wheel_matches = glob.glob("target/wheels/rusty_manga_image_translator-*.whl")
          if not wheel_matches:
              print("❌ No matching wheel found in target/wheels/")
              sys.exit(1)

          wheel_path = Path(wheel_matches[0])
          print(f"Found wheel: {wheel_path}")

          # === Set up target path inside wheel ===
          package_root_subdir = "rusty_manga_image_translator"
          target_inside_wheel = f"{package_root_subdir}/{dll_path.name}"

          # === Replace wheel in-place ===
          tmp_wheel_path = wheel_path.with_name(wheel_path.stem + "_tmp.whl")

          with WheelFile(wheel_path, 'r') as original_wheel:
              with WheelFile(tmp_wheel_path, 'w') as new_wheel:
                  for name in original_wheel.namelist():
                      if name != target_inside_wheel:
                          new_wheel.writestr(name, original_wheel.read(name))
                  new_wheel.write(dll_path, arcname=target_inside_wheel)

          tmp_wheel_path.replace(wheel_path)
          print(f"Wheel updated in-place: {wheel_path}")
          '@
          Set-Content inject_dll.py $script

      - name: Inject DLL into wheel
        run: python inject_dll.py

  release:
    needs:
      - build
      - build-windows-python
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Release Files
        run: |
          mkdir release
          cp -- "-linux-x86_64/dbnet" release/manga-image-translator-linux-x86_64
          cp -- "-windows-x86_64/dbnet.exe" release/manga-image-translator-windows-x86_64.exe
          cp -- "-macos-x86_64/dbnet" release/manga-image-translator-macos-x86_64
          cp -- "-linux-arm64/dbnet" release/manga-image-translator-linux-arm64
          cp -- "-macos-arm64/dbnet" release/manga-image-translator-macos-arm64

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/manga-image-translator-macos-x86_64
            release/manga-image-translator-linux-x86_64
            release/manga-image-translator-windows-x86_64.exe
            release/manga-image-translator-linux-arm64
            release/manga-image-translator-macos-arm64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PyPI Release
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          find wheels-* -name "*.whl" -print0 | xargs -0 twine upload --skip-existing
