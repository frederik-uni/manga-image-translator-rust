name: Build, Check and Publish

on:
  push:
    branches: ["master"]
    tags: ["v*"]
  pull_request:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [
            ubuntu-latest,
            macos-latest,
            "macos-13",
            "ubuntu-24.04-arm",
            # "windows-11-arm",
            # "windows-latest",
          ]
        include:
          - os: ubuntu-latest
            name: linux-x86_64
          - os: ubuntu-24.04-arm
            name: linux-arm64
          - os: macos-latest
            name: macos-arm64
          - os: macos-13
            name: macos-x86_64
          # - os: windows-latest
          #   name: windows-x86_64
          # - os: windows-11-arm
          #   name: windows-arm64

    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'pull_request' ||
      startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v5
        if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-11-arm'
        with:
          python-version: |
            3.9
            3.10
            3.11
            3.12
            3.13

      - name: Set up Python (Windows arm)
        uses: actions/setup-python@v5
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-11-arm'
        with:
          python-version: |
            3.11
            3.12
            3.13

      - name: Install maturin
        run: pip install maturin

      - name: Find Python interpreters
        if: startsWith(github.ref, 'refs/tags/')
        id: find-pythons
        shell: bash
        run: |
          paths=""
          set +e
          for version in 3.9 3.10 3.11 3.12 3.13; do
            python_path=$(which python${version} || which python${version/./})
            if [ -x "$python_path" ]; then
              echo "Found Python $version at $python_path"
              paths+="--interpreter $python_path "
            else
              echo "Python $version not found"
            fi
          done
          set -e
          echo "interpreters=$paths" >> "$GITHUB_OUTPUT"

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libopencv-dev clang libclang-dev libfontconfig-dev

      - name: Install openssl (macOS)
        if: matrix.os == 'macos-13'
        run: |
          brew install openssl@3

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          echo 'export OPENSSL_DIR=$(brew --prefix openssl@3)' >> $GITHUB_ENV
          brew install opencv llvm

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-11-arm' || matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install llvm:x64-windows opencv4[contrib,nonfree]:x64-windows

      - name: Set VCPKG env vars for Cargo
        if: matrix.os == 'windows-11-arm' || matrix.os == 'windows-latest'
        run: |
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $env:GITHUB_ENV

      # - name: Build
      #   run: cargo build --verbose -p dbnet

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run tests
        if: github.event_name == 'pull_request' && matrix.os == 'macos-latest'
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release -p dbnet

      - name: Build with maturin
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd crates/py-bindings
          maturin build --release ${{ steps.find-pythons.outputs.interpreters }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: -${{ matrix.name }}
          path: |
            target/release/dbnet
            target/release/dbnet.exe
          retention-days: 5
          if-no-files-found: ignore

      - name: Upload wheel artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.name }}
          path: target/wheels/*.whl
          retention-days: 5

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Release Files
        run: |
          mkdir release
          cp -- "-linux-x86_64/dbnet" release/manga-image-translator-linux-x86_64
          cp -- "-linux-arm64/dbnet" release/manga-image-translator-linux-arm64
          cp -- "-macos-arm64/dbnet" release/manga-image-translator-macos-arm64
          cp -- "-macos-x86_64/dbnet" release/manga-image-translator-macos-x86_64

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/manga-image-translator-macos-x86_64
            release/manga-image-translator-linux-x86_64
            release/manga-image-translator-linux-arm64
            release/manga-image-translator-macos-arm64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PyPI Release
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          find wheels-* -name "*.whl" -print0 | xargs -0 twine upload --skip-existing
